#include "BackGround.h"
#include "stdlib.h"
#include "Novice.h"
//ヘッダーファイル読み込み

//int型多重配列変数Mapを行の要素数19・列の要素数33で宣言し、以下の値で初期化する
int Map[19][33] = {
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};

BackGround::BackGround()//BackGroundクラスのインスタンスを使用して、初期化を行う 
{
	Rand.x = 0;
	Rand.y = 0;

	color_ = BLACK;
	isShake = 0;
	ShakeTimer = 0;

	BlockSize = 40;
}

void BackGround::Update()//BackGroundクラスのメンバ関数Updateを使用して、更新処理を行う 
{

	if (isShake == 1)//isShakeが1である場合 
	{
		ShakeTimer++;//ShakeTimerをインクリメントする
	}

	if (ShakeTimer > 1 && ShakeTimer < 80)//ShakeTimerが1より大きく80より小さい場合 
	{
		Rand.x = rand() % 33 - 16.0f;
		Rand.y = rand() % 33 - 16.0f;
		//RandのXとYを-16から16の範囲に設定する
	}

	if (ShakeTimer >= 10)//ShakeTimerが10以上である場合 
	{
		Rand.x = rand() % 29 - 14.0f;
		Rand.y = rand() % 29 - 14.0f;
		//RandのXとYを-14から14の範囲に設定する
	}

	if (ShakeTimer >= 20)//ShakeTimerが20以上である場合  
	{
		Rand.x = rand() % 25 - 12.0f;
		Rand.y = rand() % 25 - 12.0f;
		//RandのXとYを-12から12の範囲に設定する
	}

	if (ShakeTimer >= 30)//ShakeTimerが30以上である場合  
	{
		Rand.x = rand() % 21 - 10.0f;
		Rand.y = rand() % 21 - 10.0f;
		//RandのXとYを-10から10の範囲に設定する
	}

	if (ShakeTimer >= 40)//ShakeTimerが40以上である場合   
	{
		Rand.x = rand() % 17 - 8.0f;
		Rand.y = rand() % 17 - 8.0f;
		//RandのXとYを-8から8の範囲に設定する
	}

	if (ShakeTimer >= 50)//ShakeTimerが50以上である場合  
	{
		Rand.x = rand() % 13 - 6.0f;
		Rand.y = rand() % 13 - 6.0f;
		//RandのXとYを-6から6の範囲に設定する
	}

	if (ShakeTimer >= 60)//ShakeTimerが60以上である場合 
	{
		Rand.x = rand() % 9 - 4.0f;
		Rand.y = rand() % 9 - 4.0f;
		//RandのXとYを-4から4の範囲に設定する
	}

	if (ShakeTimer >= 70)//ShakeTimerが70以上である場合  
	{
		Rand.x = rand() % 5 - 2.0f;
		Rand.y = rand() % 5 - 2.0f;
		//RandのXとYを-2から2の範囲に設定する
	}

	if (ShakeTimer >= 80)//ShakeTimerが80以上である場合  
	{
		isShake = 0;//シェイクのフラグを折り
		Rand.x = 0;
		Rand.y = 0;
		//RandのXとYを0に戻し

		ShakeTimer = 0;
		//ShakeTimerを0に戻す
	}
}

void BackGround::Draw()//BackGroundクラスのメンバ関数Drawを使用し、マップチップの描画を行う 
{
	//int型変数TileHandleを宣言し、LoadTextureでタイル画像を読み込む
	int TileHandle = Novice::LoadTexture("./Resources/Tile.png");

	//多重配列を使用して、Map番号が1であるときにタイル画像を描画する
	for (int y = 0; y < 19; y++) {
		for (int x = 0; x < 33; x++) {
			if (Map[y][x] == 1) {
				Novice::DrawSprite((- 20 + x * BlockSize) + (int)Rand.x, ( - 20 + y * BlockSize) + (int)Rand.y, TileHandle, 1, 1, 0.0f, WHITE);
			}
		}
	}
}